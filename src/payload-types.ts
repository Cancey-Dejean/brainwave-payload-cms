/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    media: Media;
    pages: Page;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    header: Header;
    footer: Footer;
    'site-settings': SiteSetting;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    'site-settings': SiteSettingsSelect<false> | SiteSettingsSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  slug: string;
  layout?:
    | (
        | {
            headline?: string | null;
            headlineHighlight?: string | null;
            description?: string | null;
            button: {
              label: string;
              url: string;
              newTab?: boolean | null;
            };
            image?: (number | null) | Media;
            imageText?: string | null;
            socialProof?: {
              title?: string | null;
              logos?:
                | {
                    logo?: (number | null) | Media;
                    id?: string | null;
                  }[]
                | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'hero';
          }
        | {
            headline?: string | null;
            cards?:
              | {
                  title?: string | null;
                  description?: {
                    root: {
                      type: string;
                      children: {
                        type: string;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  } | null;
                  icon?: (number | null) | Media;
                  btnText?: string | null;
                  btnUrl?: string | null;
                  variant?: ('v1' | 'v2' | 'v3' | 'v4' | 'v5' | 'v6') | null;
                  backgroundImage?: (number | null) | Media;
                  gradientLight?: boolean | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'features';
          }
        | {
            headline?: string | null;
            perks?:
              | {
                  title?: string | null;
                  description?: {
                    root: {
                      type: string;
                      children: {
                        type: string;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  } | null;
                  id?: string | null;
                }[]
              | null;
            button: {
              label: string;
              url: string;
              newTab?: boolean | null;
            };
            topDescription: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            circleCenterImage?: (number | null) | Media;
            circleImages?:
              | {
                  icon?: (number | null) | Media;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'collaboration';
          }
        | {
            headline?: string | null;
            description?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            featuredCard?: {
              image?: (number | null) | Media;
              title?: string | null;
              description?: string | null;
              itemList?:
                | {
                    title?: string | null;
                    showBorder?: boolean | null;
                    id?: string | null;
                  }[]
                | null;
              bottomText?: string | null;
            };
            cardOne?: {
              cardOneImage?: (number | null) | Media;
              cardOneTitle?: string | null;
              cardOneDescription?: string | null;
              chatMessage?: string | null;
            };
            cardTwo?: {
              cardTwoTitle?: string | null;
              cardTwoDescription?: string | null;
              cardTwoImage?: (number | null) | Media;
              chatMessage?: string | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'services';
          }
        | {
            topImage?: (number | null) | Media;
            bracketText?: string | null;
            headline?: string | null;
            plans?:
              | {
                  plan?: ('basic' | 'premium' | 'enterprise') | null;
                  title?: string | null;
                  description?: string | null;
                  price?: string | null;
                  button: {
                    label: string;
                    url: string;
                    newTab?: boolean | null;
                  };
                  features?:
                    | {
                        title?: string | null;
                        id?: string | null;
                      }[]
                    | null;
                  id?: string | null;
                }[]
              | null;
            linkText: {
              label: string;
              url: string;
              newTab?: boolean | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'pricing';
          }
        | {
            bracketText?: string | null;
            headline?: string | null;
            cards?:
              | {
                  colorful?: boolean | null;
                  date?: string | null;
                  status?: ('done' | 'in-progress' | 'planned') | null;
                  image?: (number | null) | Media;
                  title?: string | null;
                  description?: {
                    root: {
                      type: string;
                      children: {
                        type: string;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  } | null;
                  id?: string | null;
                }[]
              | null;
            button: {
              label: string;
              url: string;
              newTab?: boolean | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'roadmap';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  layout?:
    | T
    | {
        hero?:
          | T
          | {
              headline?: T;
              headlineHighlight?: T;
              description?: T;
              button?:
                | T
                | {
                    label?: T;
                    url?: T;
                    newTab?: T;
                  };
              image?: T;
              imageText?: T;
              socialProof?:
                | T
                | {
                    title?: T;
                    logos?:
                      | T
                      | {
                          logo?: T;
                          id?: T;
                        };
                  };
              id?: T;
              blockName?: T;
            };
        features?:
          | T
          | {
              headline?: T;
              cards?:
                | T
                | {
                    title?: T;
                    description?: T;
                    icon?: T;
                    btnText?: T;
                    btnUrl?: T;
                    variant?: T;
                    backgroundImage?: T;
                    gradientLight?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        collaboration?:
          | T
          | {
              headline?: T;
              perks?:
                | T
                | {
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              button?:
                | T
                | {
                    label?: T;
                    url?: T;
                    newTab?: T;
                  };
              topDescription?: T;
              circleCenterImage?: T;
              circleImages?:
                | T
                | {
                    icon?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        services?:
          | T
          | {
              headline?: T;
              description?: T;
              featuredCard?:
                | T
                | {
                    image?: T;
                    title?: T;
                    description?: T;
                    itemList?:
                      | T
                      | {
                          title?: T;
                          showBorder?: T;
                          id?: T;
                        };
                    bottomText?: T;
                  };
              cardOne?:
                | T
                | {
                    cardOneImage?: T;
                    cardOneTitle?: T;
                    cardOneDescription?: T;
                    chatMessage?: T;
                  };
              cardTwo?:
                | T
                | {
                    cardTwoTitle?: T;
                    cardTwoDescription?: T;
                    cardTwoImage?: T;
                    chatMessage?: T;
                  };
              id?: T;
              blockName?: T;
            };
        pricing?:
          | T
          | {
              topImage?: T;
              bracketText?: T;
              headline?: T;
              plans?:
                | T
                | {
                    plan?: T;
                    title?: T;
                    description?: T;
                    price?: T;
                    button?:
                      | T
                      | {
                          label?: T;
                          url?: T;
                          newTab?: T;
                        };
                    features?:
                      | T
                      | {
                          title?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              linkText?:
                | T
                | {
                    label?: T;
                    url?: T;
                    newTab?: T;
                  };
              id?: T;
              blockName?: T;
            };
        roadmap?:
          | T
          | {
              bracketText?: T;
              headline?: T;
              cards?:
                | T
                | {
                    colorful?: T;
                    date?: T;
                    status?: T;
                    image?: T;
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              button?:
                | T
                | {
                    label?: T;
                    url?: T;
                    newTab?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  logo?: (number | null) | Media;
  primaryMenu?:
    | {
        label: string;
        url: string;
        newTab?: boolean | null;
        id?: string | null;
      }[]
    | null;
  secondaryMenu?:
    | {
        menu?:
          | {
              label: string;
              url: string;
              newTab?: boolean | null;
              id?: string | null;
            }[]
          | null;
        ctaButton: {
          label: string;
          url: string;
          newTab?: boolean | null;
        };
        id?: string | null;
      }[]
    | null;
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  logo: number | Media;
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings".
 */
export interface SiteSetting {
  id: number;
  socialMedia?:
    | {
        label?: string | null;
        url?: string | null;
        id?: string | null;
      }[]
    | null;
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  logo?: T;
  primaryMenu?:
    | T
    | {
        label?: T;
        url?: T;
        newTab?: T;
        id?: T;
      };
  secondaryMenu?:
    | T
    | {
        menu?:
          | T
          | {
              label?: T;
              url?: T;
              newTab?: T;
              id?: T;
            };
        ctaButton?:
          | T
          | {
              label?: T;
              url?: T;
              newTab?: T;
            };
        id?: T;
      };
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  logo?: T;
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings_select".
 */
export interface SiteSettingsSelect<T extends boolean = true> {
  socialMedia?:
    | T
    | {
        label?: T;
        url?: T;
        id?: T;
      };
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}